/*
 * Copyright 2017 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    ext {
        kotlin_version = "1.2.10"
        jda_version = "3.3.1_313"
        javapoet_version = "1.9.0"
        auto_value_version = "1.5.2"
        auto_factory_version = "1.0-beta5"
        auto_service_version = "1.0-rc3"
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
        classpath "gradle.plugin.com.sedmelluq:jdaction:1.0.2"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'

def bintrayUsername = project.property('bintrayUsername')?.toString()?.trim()
def bintrayApiKey = project.property('bintrayApiKey')?.toString()?.trim()

subprojects {
    extensions.create("jdaAuto", JDAAutoExtension)
    def jdaAuto = extensions.getByName("jdaAuto") as JDAAutoExtension

    project.ext {
        artifactId = "${rootProject.name.toLowerCase()}-" +
                "${project.name != 'commons' ? project.name.substring(5).toLowerCase() : project.name.toLowerCase()}"
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'net.ltgt.apt-idea'
    apply plugin: 'com.sedmelluq.jdaction'
    apply plugin: 'com.github.johnrengelman.shadow'

    if(project.name != 'examples' && !jdaAuto.noRelease) {
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'com.github.ben-manes.versions'
    }

    // Enable kotlin
    if(jdaAuto.kotlinConfig.enable) {
        apply plugin: 'kotlin'
        dependencies {
            compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

            if(jdaAuto.kotlinConfig.reflect) {
                compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            }
        }
    }

    group 'me.kgustave'
    version '1.0.0'

    sourceCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        if(jdaAuto.javapoet) {
            compile "com.squareup:javapoet:$javapoet_version"
        }

        if(jdaAuto.autoServices.autovalue) {
            compileOnly "com.google.auto.value:auto-value:$auto_value_version"
            apt         "com.google.auto.value:auto-value:$auto_value_version"
        }

        if(jdaAuto.autoServices.autofactory) {
            compileOnly "com.google.auto.factory:auto-factory:$auto_factory_version"
            apt         "com.google.auto.factory:auto-factory:$auto_factory_version"
        }

        // Standard Provisions
        compileOnly "net.dv8tion:JDA:$jda_version"
        apt         "net.dv8tion:JDA:$jda_version"
        compileOnly "com.google.auto.service:auto-service:$auto_service_version"
        apt         "com.google.auto.service:auto-service:$auto_service_version"

        // Make sure not to circularly compile auto-utils to itself
        if(project.name != "commons")
            compile project(":commons")

        // Testing resources
        testCompile "ch.qos.logback:logback-classic:1.2.3"
        testCompile 'junit:junit:4.12'
    }

    jar {
        baseName "$project.artifactId"
    }

    javadoc {
        options.author()
        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.encoding = 'UTF-8'
        options.tags 'apiNote:a:API Note:',
                     'implSpec:a:Implementation Requirements:',
                     'implNote:a:Implementation Note:'
    }

    tasks.create('javadocJar', Jar) {
        group 'build'
        description 'Assembles a javadoc jar file.'

        dependsOn javadoc

        from javadoc.destinationDir

        baseName "$project.artifactId"
        classifier 'javadoc'
    }

    tasks.create('sourcesJar', Jar) {
        group 'build'
        description 'Assembles a sources jar file.'

        dependsOn classes

        from sourceSets.main.allSource

        baseName "$project.artifactId"
        classifier 'sources'
    }

    shadowJar {
        baseName "$project.artifactId"
        classifier ''

        manifest {
            attributes 'Implementation-Version': "$project.version",
                       'Implementation-Title': "$rootProject.name-${project.name.capitalize()}",
                       'Automatic-Module-Name': "${project.group}.jdagen.${project.name.replaceAll('-', '').toLowerCase()}"
        }
    }

    compileJava {
        options.encoding = "UTF-8"
    }

    build {
        dependsOn sourcesJar
        dependsOn javadocJar
        dependsOn shadowJar
    }

    clean {
        // Make sure to delete intellij /out/ directory
        doFirst {
            delete("$projectDir/out")
        }
    }

    publishing {
        publications {
            BintrayRelease(MavenPublication) {
                groupId = project.group
                artifactId = project.artifactId
                version = project.version
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUsername
        key = bintrayApiKey
        publications = ['BintrayRelease']
        publish = true

        pkg {
            repo = 'maven'
            name = 'JDA-Auto'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/TheMonitorLizard/JDA-Auto'
            publicDownloadNumbers = true
            version {
                name = project.version
                released = new Date()
            }
        }
    }

    bintrayUpload {
        dependsOn build

        onlyIf { !bintrayUsername?.empty }
        onlyIf { !bintrayApiKey?.empty }
    }
}

tasks.create("buildAll") {
    group 'build'
    description 'Builds all modules'

    childProjects.values().each {
        it.getTasksByName("build", false).stream().findFirst().ifPresent {
            dependsOn it
        }
    }
}

tasks.create("cleanAll") {
    group 'build'
    description 'Cleans all modules'

    childProjects.values().each {
        it.getTasksByName("clean", false).stream().findFirst().ifPresent {
            dependsOn it
        }
    }
}

tasks.create('uploadAll') {
    group 'publishing'
    description 'Publishes all modules'

    childProjects.values().each {
        it.getTasksByName('bintrayUpload', false).stream().findFirst().ifPresent {
            dependsOn it
        }
    }
}

wrapper {
    // Minimum version to support Java 9 is 4.2.1
    gradleVersion = "4.2.1"
}

// Configuration container class to handle easy and readable resource configurations
@SuppressWarnings("GroovyUnusedDeclaration")
class JDAAutoExtension {
    boolean noRelease = false
    boolean javapoet = false
    final Kotlin kotlinConfig = new Kotlin()

    final Google autoServices = new Google()

    void auto(Closure<Google> closure) {
        autoServices.with(closure)
    }

    void kotlin(Closure<Kotlin> closure) {
        kotlinConfig.with(closure)
    }

    class Google {
        boolean autovalue = false
        boolean autofactory = false
    }

    class Kotlin {
        boolean enable = false
        boolean reflect = false
    }
}